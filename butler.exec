/* BUTLER EXEC                         */
/*                                     */
/* A VM geneeral service program       */
/* for z/VM, VM/ESA and VM/SP          */
/* Moshix                              */
/*                                     */
/* copyright 2021  by moshix           */
/* Apache 2.0 license                  */
/***************************************/
/* execute this from RELAY VM before starting RELAY CHAT:            */
/* defaults set tell msgcmd msgnoh to remove host(user) in output    */
/*  CHANGE HISTORY                                                   */
/*  V0.1    :  Humble beginnings                                     */
/*  V0.2    :  Add user command history /users                       */
/*  V0.3    :  Add /benchmark command                                */
 
 
/* configuraiton parameters - IMPORTANT                               */
butlerversion="0.1"      /* needed                                    */
timezone="EDT"           /* adjust for your server IMPORTANT          */
maxdormant =500          /* max time user can be dormat               */
localnode=""             /* localnode is now autodetected as 2.7.1    */
osversion="z/VM 6.4"     /* OS version for enquries and stats         */
typehost="IBM z114"      /* what kind of machine                      */
hostloc  ="Stockholm,SE" /* where is this machine                     */
sysopname="adfasdfx  "   /* who is the sysop for this chat server     */
sysopemail="sdfasfx@gmail" /* where to contact this systop             */
compatibility=3           /* 1 VM/SP 6, 2=VM/ESA 3=z/VM and up        */
sysopuser='MAINT'         /* sysop user who can force users out       */
sysopnode=translate(localnode) /* sysop node automatically set        */
raterwatermark=18000      /* max msgs per minute set for this server  */
log2file=1                 /* log also to butler log file          */
 
/* global variables                                                  */
isincluded=0               /* is keyword found ??                    */
eStarttime=1               /* used for logged on users to start countdown to asleep */
LastSessionStart=3000000   /* last user session started at...        */
InSessionUser=""           /* which user is currently in session     */
BIGLOCK=0                  /* RESET LOCK FOR MULTITENANT */
returnNJEmsg="HCPMSG045E" /* messages returning for users not logged on */
returnNJEmsg2="DMTRGX334I"/* looping error message flushed         */
returnNJEmsg3="HCPMFS057I"/* looping error message flushed         */
loggedonusers = 0        /* online user at any given moment        */
highestusers = 0         /* most users online at any given moment  */
totmessages  = 0         /* total number of msgs sent              */
otime = 0                /* overtime to log off users after n minutes */
starttime=mytime()       /*  for /SYSTEM                           */
starttimeSEC=ExTime()    /*  for msg rate  calculation             */
logline = " "            /* initialize log line                    */
receivedmsgs=0           /* number of messages received for stats and loop*/
err1="currently NOT"
err2="to logon on"
err3="Weclome to RELAY chat"
err4="logged off now"
illegaluser1="RSCS"      /* we should never receive a message from these users */
illegaluser2="ROOT"      /* we should never receive a message from these users */
historypointer=1
history.0=20             /* max 20 entries for user command history */
BCASTMSG.0=5             /* MAX 5 BROADCAST LINES                  */
BCASTMSG.1="The SysAdmin has not yet set the broadcast message"
BCASTMSG.2=""
BCASTMSG.3=""
BCASTMSG.4=""
BCASTMSG.5=""
sysperf=0                /* /benchmark system performance (in sec) holder */
 
 
 
call initbutler          /* initalize butler and do all the fancy stuff to start */
 
/* Invoke WAKEUP first so it will be ready to receive msgs */
/* This call also issues a 'SET MSG IUCV' command.         */
 
  'SET MSG IUCV'
  "WAKEUP +0 (IUCVMSG"
 
  'MAKEBUF'
 
  Do forever;
     'wakeup (iucvmsg QUIET'   /* wait for a message         */
     parse pull text          /* get what was send          */
    CurrentTime=Extime()
     select
        when Rc = 5 then do;  /* we have a message          */
        /* parse it                                       */
           if pos('From', text) > 0 then  do  /* from RSCS   */
              parse var text type sender . nodeuser msg
              parse var nodeuser node '(' userid '):'
              CALL LOG('from '||userid||' @ '||node||' '||msg)
              receivedmsgs= receivedmsgs + 1
              /* below line checks if high rate watermark is exceeded */
              /* and if so.... exits!                                 */
              call highrate (receivedmsgs)
              uppuserid=TRANSLATE(userid)
  /* below line eliminates service messages from other relay nodes and eliminates loops */
  if pos(err1,msg) > 0 | pos(err2,msg) > 0 | pos(err3,msg) > 0 | pos(err4,msg) > 0 then do
              end
              else do
                if detector(msg) > 0 then call handlemsg  userid,node,msg
              end
          end
          else do;  /* simple msg from local user  */
        /* format is like this:                           */
        /* *MSG    MAINT    hello                         */
              parse var text type userid msg
                   node = localnode
               call handlemsg  userid,node,msg
           end
        end
        when Rc = 6 then
          signal xit
        otherwise
     end
 end;   /* of do forever loop  */
 
 
xit:
/* when its time to quit, come here    */
 
  'WAKEUP RESET';        /* turn messages from IUCV to ON    */
  'SET MSG ON'
  'DROPBUF'
exit;
 
 
handlemsg:
/* handle all incoming messages and send to proper method */
   parse ARG userid,node,msg
    userid=strip(userid)
    node=strip(node)
    if userid = illegaluser1 | userid = illegaluser2 then do
        call log ('Message arrived from illegal user: '||userid)
       return
    end
    CurrentTime=Extime()
    umsg = translate(msg)  /* make upper case */
    umsg=strip(umsg)
 
    /* below few lines: loop detector                  */
    loopmsg=SUBSTR(umsg,1,11) /* extract RSCS error msg */
 if (loopmsg  = returnNJEmsg | loopmsg = returnNJEmsg2 | loopmsg = returnNJEmsg3) then do
      call log('Loop detector triggered for user:  '||userid||'@'||node)
      return
    end
   commandumsg=SUBSTR(umsg,2,5)
 
   updbuff=1
   SELECT                             /* HANDLE MESSAGE TYPES  */
      when (umsg = "/BCAST") then
           call sendbcast    userid,node
      when (umsg = "/CPU") then
           call sendcpu      userid,node
      when (umsg = "/SYSTEM") then
           call systeminfo userid,node
      when (umsg = "/STATS") then
           call sendstats userid,node
      when (umsg = "/LOGOFF") then do
           call logoffuser userid,node
           updbuff=0                 /* removed, nothing to update */
      end
      when (umsg = "/USERS") then do
           call users   userid,node
       end
 
      when (umsg = "/HISTORY") then do
           call users   userid,node
       end
 
      when (umsg = "/LOGON") then do
           call logonuser  userid,node
           updbuff=0                    /* already up-to-date */
      end
      when (umsg = "/HELP") then do
           call helpuser  userid,node
      end
 
      when (umsg = "/BENCHMARK") then do
           call usrbenchmark userid,node
       end
      when (umsg = "/TIME") then do
           call sendtime userid,node
      end
 
      otherwise
           call helpuser    userid,node,msg
        end
return
 
 
sendbcast:
/* SENDS TO REQUEST THE BROADCAST MESSAGE       */
 parse ARG userid,node
 histuser=userid||" @ "||node||" : BCAST "
 call inserthistory histuser,historypointer
 if  historypointer < history.0 then historypointer=historypointer +1
 
 
 CurrentTime=Extime()
   CALL RESPOND userid,node,bcastmsg.1
   do i=2 to    bcastmsg.0
      if bcastmsg.i /= " " then  CALL RESPOND userid,node,bcastmsg.i
   end
return 0
 
 
 
systeminfo:
/* send /SYSTEM info about this host  */
     parse ARG userid,node
     listuser = userid"@"node
 histuser=userid||" @ "||node||" : SYSINFO"
 call inserthistory histuser,historypointer
 if  historypointer < history.0 then historypointer=historypointer +1
 
 
   CurrentTime=Extime()
 
     parse value translate(diag(8,"INDICATE LOAD"), " ", "15"x) ,
       with 1 "AVGPROC-" cpu "%" 1 "PAGING-"  page "/"
     cpu = right( cpu+0, 3)
    'TELL' userid 'AT' node '-> NJE node name        : 'localnode
    'TELL' userid 'AT' node '-> Butler version       : 'butlerversion
    'TELL' userid 'AT' node '-> OS for this host     : 'osversion
    'TELL' userid 'AT' node '-> Type of host         : 'typehost
    'TELL' userid 'AT' node '-> Location of this host: 'hostloc
    'TELL' userid 'AT' node '-> Time Zone of         : 'timezone
    'TELL' userid 'AT' node '-> SysOp for this server: 'sysopname
    'TELL' userid 'AT' node '-> SysOp email addr     : 'sysopemail
    'TELL' userid 'AT' node '-> System Load          :'cpu'%'
    if compatibility > 2 then do
       page=paging()
       rstor=rstorage()
       cfg=configuration()
       lcpus=numcpus()
   /*  parse var mcpu mpage mcf mrstor mlcpus  */
      'TELL' userid 'AT' node '-> Pages/Sec            : 'page
      'TELL' userid 'AT' node '-> IBM Machine Type     : 'cfg
      'TELL' userid 'AT' node '-> Memory in LPAR or VM : 'rstor
      'TELL' userid 'AT' node '-> Number of CPUs       : 'lcpus
    end
     if compatibility > 2 then do
     totmessages = totmessages + 13
     end
    else do
     totmessages = totmessages + 9
    end
return
 
 
sendstats:
/* send usage statistics to whoever asks, even if not logged on */
    parse ARG userid,node
    histuser=userid||" @ "||node||" : STATS "
    call inserthistory histuser,historypointer
    if  historypointer < history.0 then historypointer=historypointer +1
     parse value translate(diag(8,"INDICATE LOAD"), " ", "15"x) ,
       with 1 "AVGPROC-" cpu "%" 1 "PAGING-"  page "/"
     cpu = right( cpu+0, 3)
    actualtime=Extime()
    elapsedsec=(actualtime-starttimeSEC)
    if elapsedsec = 0 then elapsedsec = 1 /* avoid division by zero on Jan 1 at 00:00 */
 
    msgsrate = (receivedmsgs + totmessages) / elapsedsec
    msgsratef= FORMAT(msgsrate,4,2) /* rounding */
    msgsratef = STRIP(msgsratef)
    listuser = userid"@"node
    'TELL' userid 'AT' node '-> Total number of msgs : 'totmessages
    'TELL' userid 'AT' node '-> Messages rate /minute: 'msgsratef
    'TELL' userid 'AT' node '-> Server up since      : 'starttime' 'timezone
    'TELL' userid 'AT' node '-> System CPU load      : 'STRIP(cpu)'%'
    'TELL' userid 'AT' node '-> BUTLER version       : v'butlerversion
 
     totmessages = totmessages+ 5
return
 
helpuser:
/* send help menu */
  parse ARG userid,node
    histuser=userid||" @ "||node||" : HELP  "
    call inserthistory histuser,historypointer
    if  historypointer < history.0 then historypointer=historypointer +1
  listuser = userid"@"node
 
 
'TELL' userid 'AT' node '  ____  __  __  ____  __    ____  ____                       '
'TELL' userid 'AT' node ' (  _ \(  )(  )(_  _)(  )  ( ___)(  _ \                      '
'TELL' userid 'AT' node '  ) _ < )(__)(   )(   )(__  )__)  )   /                      '
'TELL' userid 'AT' node ' (____/(______) (__) (____)(____)(_)\_)                      '
'TELL' userid 'AT' node '                                                             '
'TELL' userid 'AT' node '  for VM/SP, VM/ESA and z/VM                                 '
'TELL' userid 'AT' node '/HELP      for this help'
'TELL' userid 'AT' node '/BCAST     to get teh broadcast message                         '
'TELL' userid 'AT' node '/STATS     for ... you guessed it ...statistics!'
'TELL' userid 'AT' node '/SYSTEM    for info about this host'
'TELL' userid 'AT' node '/STORE     to store the broadcast message (requires pswd        '
'TELL' userid 'AT' node '/USERS     to see history of users commands'
'TELL' userid 'AT' node '/BENCHMARK to see the performance of this machien'
'TELL' userid 'AT' node 'TIME       to get time zone and time of this server'
'TELL' userid 'AT' node '              '
'TELL' userid 'AT' node ' messages with  -> are dialogues from Butler '
 
  totmessages = totmessages + 17
return
 
 
users:
/* show history of last 20 chat messages to /users                 */
  parse ARG userid,node
    histuser=userid||" @ "||node||" : USERS "
    call inserthistory histuser,historypointer
    if  historypointer < history.0 then historypointer=historypointer +1
 
i=0
found=0
z=history.0
 'TELL 'userid' AT 'node '> Previous 'history.0' messages:'
 totmessages = totmessages + 1
do  i = 1 to z   by 1
   if history.i /= "" then do
       'TELL 'userid' AT 'node '> 'history.i
       totmessages = totmessages + 1
       found=found+1
   end
end
if found < 1 then 'TELL 'userid' AT 'node '> ...bummer... no chat history so far...'
       totmessages = totmessages + 1
return
 
usrbenchmark:
/* send to user a fuller benchmark suite */
    parse ARG userid,node
    histuser=userid||" @ "||node||" : BENCHMARK"
    call inserthistory histuser,historypointer
    if  historypointer < history.0 then historypointer=historypointer +1
 
  'TELL' userid 'AT' node '-> Benchmark Overiew (smaller number is better)'
  'TELL' userid 'AT' node '-> --------------------------------------------'
  'TELL' userid 'AT' node '->                  '
 
  'TELL' userid 'AT' node '-> This system                   :  'sysperf
  'TELL' userid 'AT' node '-> IBM z114                      :  0.225'
  'TELL' userid 'AT' node '-> IBM zEC12                     :  0.230'
  'TELL' userid 'AT' node '-> IBM z/PDT on Xeon 3.5Ghz      :  0.850'
  'TELL' userid 'AT' node '-> IBM z/PDT on Xeon 2.4Ghz      :  1.250'
  'TELL' userid 'AT' node '-> Hyperion 4.4 on Xeon 3.5Ghz   :  8.800'
  'TELL' userid 'AT' node '-> Hyperion 4.4 on Xeon 2.1Ghz   : 12.200'
  totmessages = totmessages + 9
return 0
 
sendtime:
/* send time and time zone to user */
    parse ARG userid,node
    histuser=userid||" @ "||node||" : TIME "
    call inserthistory histuser,historypointer
    if  historypointer < history.0 then historypointer=historypointer +1
 Parse Value Diag(8,'QUERY TIME') With . . timenow tz tday tdate
 
 
    CALL RESPOND userid,node,"It is: "||timenow||" "||tday||" "||tdate
    CALL RESPOND userid,node,"time zone: "||tz
return 0
 
 
sendcpu:
/* send  cpu busy of this machine */
 
    parse ARG userid,node
    histuser=userid||" @ "||node||" : TIME "
    call inserthistory histuser,historypointer
    if  historypointer < history.0 then historypointer=historypointer +1
 
    CALL RESPOND userid,node,"CPU busy average for this machine:  "cpubusy()||" %"
return 0
 
 
 
 
 
 
 
 
 
refreshTime:
/* Refresh last transaction time */
   arg ctime,userid,node
   listuser=userid'@'node
   ppos=pos('/'listuser,$.@)
   if ppos=0 then return              /* user not logged on */
   ppos=pos('(',$.@,ppos+1)           /* find timestamp */
   if ppos=0 then return              /* not found, let it be */
   rpos=pos(')',$.@,ppos+1)+1         /* find end of timestamp  */
   if rpos=0 then return              /* ) not found, let it be */
   rlen=rpos-ppos
   $.@=overlay('('ctime')',$.@,ppos,rlen)
return
 
 
exTime:
/* Calculate Seconds in this year */
  dd=(date('d')-1)*86400
  parse value time() with hh':'mm':'ss
  tt=hh*3600+mm*60+ss
return right(dd+tt,8,'0')
 
 
mytime: procedure
 timenow = left(time(),5)
 hr = left(timenow,2)
 min = right(timenow,2)
 if hr > 12 then timenow         = (hr - 12)'.'min' pm'
   else if hr = 12 then timenow  = hr'.'min' pm'
                    else timenow = hr'.'min' am'
 if left(timenow,1) = '0' then timenow = substr(timenow,2)
 dow     = left(date('weekday'),3)
 day     = right(date('sorted'),2)
 if left(day,1) = '0' then day = substr(day,2)
 month   = left(date('month'),3)
 year    = left(date('sorted'),4)
return timenow',' dow day month year
 
 
 
 
 
 
log:
/* general logger function                */
/* log a line to console and BUTLER LOG A  */
   parse ARG  logline
   say mytime()' :: 'logline
   if log2file = 1 & compatibility > 0 then do
   address command
/*  'PIPE (name logit)',
     '| spec /'mytime()'/ 1 /::/ n /'logLine'/ n',
     '| >> BUTLER LOG A'*/
   logline=mytime()||' :: '||logline
     'EXECIO 1 DISKW RELAY LOG A (STRING '||logline
     'FINIS BUTLER LOG A'
   end
return
 
 
cpubusy:
/* how busy are the CPU(s) on this LPAR */
/* extract CPU buy information for stats etc. */
 cplevel = space(cp_id) sl
 strlen = length(cplevel)
 
 parse value translate(diag(8,"INDICATE LOAD"), " ", "15"x) ,
        with 1 "AVGPROC-" cpu "%" 1 "PAGING-"  page "/"
 cpu = right( cpu+0, 3)
return cpu
 
paging:
/* how many pages per second is this LPAR doing? */
/* extra currenct OS paging activity */
 sl = c2d(right(diag(0), 2))
 cplevel = space(cp_id) sl
 strlen = length(cplevel)
 
 parse value translate(diag(8,"INDICATE LOAD"), " ", "15"x) ,
        with 1 "AVGPROC-" cpu "%" 1 "PAGING-"  page "/"
return page
 
rstorage:
 parse value diag(8,"QUERY STORAGE")   with . . rstor rstor? . "15"x
return rstor
 
configuration:
/* return machine configuration */
/* extract machine type etc. */
 if compatibility > 2 then do
Parse Value Diag(8,'QUERY CPLEVEL') With ProdName .
     Parse Value Diag(8,'QUERY CPLEVEL') With uptime  , . . .  .  .  .  . ipltime
 
 
  Parse Value Diag(8,'QUERY CPLEVEL') With ProdName .
  Parse Value Diag(8,'QUERY CPLEVEL') With uptime  , . . .  .  .  .  . ipltime
  parse value stsi(1,1,1) with 49  type   +4 ,
                               81  seq   +16 ,
                              101  model +16 .
 
  parse value stsi(2,2,2) with 33 lnum   +2 ,  /* Partition number       */
                               39 lcpus  +2 ,  /* # of CPUs in the LPAR  */
                               45 lname  +8    /* partition name         */
 
  parse value stsi(3,2,2) with 39 vcpus  +2 ,  /* # of CPUs in the v.m.  */
                               57 cp_id +16
 
  parse value c2d(lnum) c2d(lcpus) c2d(vcpus) right(seq,5) lname model ,
         with     lnum      lcpus      vcpus        ser    lname model .
 
  blist = "- 2097 z10-EC 2098 z10-BC 2817 z196 2818 z114",
          "  2827 zEC12  2828 zBC12 2964 z13 2965 z13s"
 
  brand = strip(translate( word(blist, wordpos(type, blist)+1), " ", "-"))
 
end
return type
 
numcpus:
/* return number of CPUs in this LPAR */
  parse value stsi(1,1,1) with 49  type   +4 ,
                               81  seq   +16 ,
                              101  model +16 .
 
  parse value stsi(2,2,2) with 33 lnum   +2 ,  /* Partition number       */
                               39 lcpus  +2 ,  /* # of CPUs in the LPAR  */
                               45 lname  +8    /* partition name         */
 
  parse value stsi(3,2,2) with 39 vcpus  +2 ,  /* # of CPUs in the v.m.  */
                               57 cp_id +16
 
  parse value c2d(lnum) c2d(lcpus) c2d(vcpus) right(seq,5) lname model ,
         with     lnum      lcpus      vcpus        ser    lname model .
 
  blist = "- 2097 z10-EC 2098 z10-BC 2817 z196 2818 z114",
          "  2827 zEC12  2828 zBC12 2964 z13 2965 z13s 1090 zPDT 3096 z14"
 
  brand = strip(translate( word(blist, wordpos(type, blist)+1), " ", "-"))
 
 
return lcpus
 
highrate:
/* when too many incoming messages per second exit server to avoid CPU overloading */
/* this function detects high msg rate for loop detection purposes
   or for system load abatement purposes                          */
  RATE = 0
  parse ARG receivedmsg
  currentime=Extime()
  elapsedtime=currentime-starttimeSEC
  if elapsedtime = 0 then elapsedtime = 3 /* some machines too fast */
  rate = receivedmsg/elapsedtime
  if rate > raterwatermark then do
     call log ('Rate high watermark exceeded, rate: '||rate)
     signal xit;
   end
  else do
   return 0
   end
return
 
 
detector:
/* detect if a message is looping by extracting middle of an incoming message-> comparing*/
parse ARG msg /* last message in */
 
Middle=center(prevmsg.1,20)
Middle=strip(middle)                      /* in case message <50 we will
have leading/trailing blanks, drop them */
Opos=pos(middle,msg)  /* middle part in new message */
If opos>0 then do
     prevmsg.1=msg
     say "message looping deteced"
     return -1
 end
prevmsg.1=msg
return 1
 
whoami:
 
"id (stack"
pull whoamiuser . whoaminode . whoamistack
whoamistack=LEFT(whoamistack,5)
return
 
respond:
 /* general TELL command for butler */
 parse ARG userid,node,response
 'TELL' userid 'AT' node '-> 'response
 totmessages=totmessages+1
return 0
 
inithistory:
history.1=""
history.2=""
history.3=""
history.4=""
history.5=""
history.6=""
history.7=""
history.8=""
history.9=""
history.10=""
history.11=""
history.12=""
history.13=""
history.14=""
history.15=""
history.16=""
history.17=""
history.18=""
history.19=""
history.20=""
RETURN 0
 
inserthistory:
/* insert history item and scroll */
parse ARG hmsg,pointer
if pointer < history.0 then do
 history.pointer = hmsg
end
if pointer >= history.0 then do
/* ok, we need to scroll up */
 
  do i = 1 to history.0
      d = i + 1
      history.i =history.d
  end
 
  history.z = hmsg/* insert msg at the bottom */
end
return 0
 
benchmark:
/* benchmark relative system speed with nqueen problem 8x8 */
elp=time('E')
bsolution=queen(8,1)
elp=Trunc(time('e')-elp,3) /* number of seconds */
return elp
 
QUEEN: PROCEDURE expose count
 parse arg n,noprint
 chess.0=copies('. + ',n%2)
 chess.1=copies('+ . ',n%2)
 chessAl='a b c d e f g h i j k l m n o p q r s t u v x y z'
 count = 0
 k = 1
 a.k = 0
 do while k>0
    a.k = a.k + 1
    do while a.k<= n & place(k) =0
       a.k = a.k +1
    end
    if a.k > n then k=k-1
    else do   /* a.k <= n */
       if k=n then do
          count=count+1
       end
       else do
          k=k+1
          a.k=0
       end
    end
end
return count
 
place: procedure expose a. count
/* place queens on chess board for /benchmark command */
 parse arg ps
 do i=1 to ps-1
    if a.i = a.ps then return 0
    if abs(a.i-a.ps)=(ps-i) then return 0
 end
return 1
 
 
 
 
initbutler:
/* butler initialization routimes */
whoamiuser=""             /* for autoconfigure                        */
whoaminode=""
whomistack=""
call whoami               /* who the fahma am I??                     */
say 'Hello, I am: '||whoamiuser||' at '||whoaminode||' with '||whoamistack
 
localnode=whoaminode   /* set localnode */
 
if compatibility > 2 then do /* must be z/VM       , ie min requirement VM level*/
 
 say 'All CPU avg: 'cpu '%     Paging: 'paging()
 
     say 'Machine type: 'configuration()'     RAM: 'rstorage()
     say 'Number of CPU: in LPAR: 'numcpus()
 END
     say '                        '
     say '****** LOG BELOW *******'
 
/* some simple logging  for stats etc        */
      CALL log('BUTLER '||butlerversion||' started. ')
 
 Parse Value Diag(8,'QUERY TIME') With . . timenow tz tday tdate
/*-------------------------------------------*/
 
call inithistory
call log ('History initalized...')
call log ('Exact system time now:'||timenow||" "||date)
sysperf=benchmark()
CALL log('********** BUTLER  START **********')
 say '  ____  __  __  ____  __    ____  ____                      '
 say ' (  _ \(  )(  )(_  _)(  )  ( ___)(  _ \                     '
 say '  ) _ < )(__)(   )(   )(__  )__)  )   /                     '
 say ' (____/(______) (__) (____)(____)(_)\_)                     '
 say '                                                            '
 say '  for VM/SP, VM/ESA and z/VM                                '
 say '                                                            '
 say '  Welcome to Butler                                         '
 say '                                                            '
 
return 0
